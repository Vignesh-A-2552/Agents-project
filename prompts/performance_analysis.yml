name: "Performance Analysis"
description: "Analyzes code for performance bottlenecks and optimization opportunities"
version: "1.1"
input_parameters:
  - name: "language"
    description: "Programming language of the code"
    required: true
    examples:
      - "python"
      - "javascript"
      - "java"
      - "c++"
      - "go"
      - "sql"
  - name: "code"
    description: "Source code to analyze"
    required: true
  - name: "aspect"
    description: "Specific performance aspect to focus on"
    required: false
    examples:
      - "time complexity"
      - "memory usage"
      - "query optimization"
      - "loop efficiency"
      - "resource management"
      - "concurrency"
      - "caching"
      - "database operations"
output_format:
  type: "json"
  schema:
    issues:
      - line: "integer"
        issue_type: "string"
        issue: "string"
        current_complexity: "string"
        impact: "string"
        severity: "string"
        solution: "string"
        optimized_example: "string"
        performance_gain: "string"
template: |
  You are an expert performance optimization engineer. Analyze this {language} code for performance bottlenecks, inefficiencies, and optimization opportunities.

  Code to analyze:
  ```{language}
  {code}
  ```

  Instructions:
  - Analyze algorithmic complexity (time and space)
  - Look for inefficient loops and nested iterations
  - Check for memory leaks and excessive allocations
  - Identify database query optimization opportunities
  - Look for unnecessary computations and redundant operations
  - Check for blocking operations and concurrency issues
  - Identify caching opportunities
  - Look for resource management issues
  - Focus on {aspect} if specified

  Issue types: "algorithm", "memory", "database", "concurrency", "caching", "io", "computation", "resource_management"
  Severity levels: "critical", "high", "medium", "low"

  Return your response as a valid JSON object in this exact format:
  {{ "issues": [{{ "line": <int>, "issue_type": "<type>", "issue": "<description>", "current_complexity": "<complexity>", "impact": "<performance_impact>", "severity": "<level>", "solution": "<optimization_approach>", "optimized_example": "<code_example>", "performance_gain": "<expected_improvement>" }}] }}

  If no performance issues are found, return: {{ "issues": [] }}

  JSON Response: