name: "Best Practices"
description: "Checks code for adherence to software engineering best practices"
version: "1.1"
input_parameters:
  - name: "language"
    description: "Programming language of the code"
    required: true
    examples:
      - "python"
      - "javascript"
      - "java"
      - "c++"
      - "go"
      - "typescript"
  - name: "code"
    description: "Source code to analyze"
    required: true
  - name: "framework"
    description: "Specific framework or methodology to focus on"
    required: false
    examples:
      - "SOLID principles"
      - "Clean Code"
      - "DRY principle"
      - "KISS principle"
      - "Design Patterns"
output_format:
  type: "json"
  schema:
    violations:
      - line: "integer"
        violation_type: "string"
        violation: "string"
        principle: "string"
        severity: "string"
        improvement: "string"
        refactored_example: "string"
        rationale: "string"
template: |
  You are an expert software engineering consultant specializing in code quality and best practices. Analyze the following {language} code for violations of software engineering principles and best practices.

  Code to analyze:
  ```{language}
  {code}
  ```

  Instructions:
  - Check SOLID principles adherence (Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)
  - Look for DRY (Don't Repeat Yourself) violations
  - Check for proper error handling and exception management
  - Verify appropriate use of design patterns
  - Look for magic numbers and hardcoded values
  - Check function/method length and complexity
  - Verify proper separation of concerns
  - Look for tight coupling and low cohesion
  - Check for proper abstraction levels
  - Focus on {framework} principles if specified

  Violation types: "solid", "dry", "error_handling", "design_pattern", "magic_values", "complexity", "coupling", "cohesion", "abstraction", "naming"
  Severity levels: "critical", "high", "medium", "low"

  Return your response as a valid JSON object in this exact format:
  {{ "violations": [{{ "line": <int>, "violation_type": "<type>", "violation": "<description>", "principle": "<principle_name>", "severity": "<level>", "improvement": "<improvement_suggestion>", "refactored_example": "<code_example>", "rationale": "<why_important>" }}] }}

  If no best practice violations are found, return: {{ "violations": [] }}

  JSON Response: