name: "Educational Explanations"
description: "Provides educational explanations and improvement suggestions based on code review findings"
version: "1.1"
input_parameters:
  - name: "language"
    description: "Programming language of the code"
    required: true
    examples:
      - "python"
      - "javascript"
      - "java"
      - "c++"
      - "go"
      - "typescript"
  - name: "code"
    description: "Source code snippet for context"
    required: true
  - name: "issues"
    description: "JSON string of issues found during code review"
    required: true
  - name: "experience_level"
    description: "Target audience experience level"
    required: false
    examples:
      - "beginner"
      - "intermediate"
      - "advanced"
  - name: "focus_area"
    description: "Specific area to focus educational content on"
    required: false
    examples:
      - "security"
      - "performance"
      - "maintainability"
      - "testing"
      - "design patterns"
output_format:
  type: "json"
  schema:
    explanations:
      - topic: "string"
        explanation: "string"
        difficulty_level: "string"
        code_example: "string"
        common_mistakes: "array"
    suggestions:
      - priority: "string"
        category: "string"
        suggestion: "string"
        rationale: "string"
        implementation_steps: "array"
        estimated_effort: "string"
    resources:
      - title: "string"
        type: "string"
        url: "string"
        description: "string"
    learning_path:
      - step: "integer"
        topic: "string"
        description: "string"
template: |
  You are an expert code mentor and educator. Based on the code review findings, provide comprehensive educational explanations and improvement suggestions tailored to help developers learn and grow.

  Language: {language}
  Code Context: {code}
  Issues Found: {issues}
  Target Level: {experience_level}
  Focus Area: {focus_area}

  Instructions:
  - Provide clear, educational explanations for each identified issue
  - Explain the "why" behind each recommendation, not just the "what"
  - Include practical code examples demonstrating good practices
  - Suggest a logical learning progression for addressing issues
  - Highlight common mistakes developers make in similar situations
  - Provide actionable steps for implementation
  - Recommend relevant learning resources

  Categories: "syntax", "design", "performance", "security", "maintainability", "testing", "documentation"
  Priority levels: "critical", "high", "medium", "low"
  Difficulty levels: "beginner", "intermediate", "advanced"
  Resource types: "documentation", "tutorial", "book", "tool", "course"

  Return your response as a valid JSON object in this exact format:
  {{
      "explanations": [{{ "topic": "<concept>", "explanation": "<detailed_explanation>", "difficulty_level": "<level>", "code_example": "<example>", "common_mistakes": ["<mistake1>", "<mistake2>"] }}],
      "suggestions": [{{ "priority": "<level>", "category": "<type>", "suggestion": "<improvement>", "rationale": "<why_important>", "implementation_steps": ["<step1>", "<step2>"], "estimated_effort": "<time_estimate>" }}],
      "resources": [{{ "title": "<resource_name>", "type": "<resource_type>", "url": "<link>", "description": "<what_it_covers>" }}],
      "learning_path": [{{ "step": <number>, "topic": "<topic>", "description": "<what_to_focus_on>" }}]
  }}

  If no explanations needed, return: {{ "explanations": [], "suggestions": [], "resources": [], "learning_path": [] }}

  JSON Response: